#!/bin/bash
# With this script you can manage and run Windows games via Proton.
# Can be executed either by running ./GameExec directly from the terminal or by running GameExec.desktop from a file manager.
#  Remember to edit the script's path in GameExec.desktop if you plan to move it to a different directory from GameExec.
# Known issues: Sometimes script crashes while trying to launch the game through GameExec.desktop. Prefer running directly from GameExec.

# Version variables
version="2.3"
changes="\nChangelog: \nFixed an issue with STEAM_COMPAT_CLIENT_INSTALL_PATH variable failing to start games on newer Proton GE versions."

# Start up greeting
echo "$(echo $'\n\r')#### Linux Game Launcher v${version} ####"
echo "by Perseus"

# Start up warning(s)
grep -q desktop <<<"$*" && echo "$(echo $'\n\r')WARNING: $(basename $0) is running through the desktop shortcut." && \
 echo "         It seems like currently something breaks when launching a game." && \
 echo "         Prefer running $(basename $0) from a terminal until the issue is resolved."

# Basic variables
script=$(realpath "$0")
scriptpath=$(dirname "$script")
config="$scriptpath/$(basename $0).conf"
gamelist="$scriptpath/GameList.txt"
steaminstallpath="${HOME}/.steam/root/"
compatpath="${steaminstallpath}compatibilitytools.d"
[ ! -d "$compatpath" ] && mkdir -p "$compatpath"

# Basic functionality check
if [ -f "$config" ]; then
 # Reading values from conf if exist
 protonbottle=$(grep "ProtonBottle" "$config" | cut -d "=" -f 2)
 protonexec=$(grep "ProtonExec" "$config" | cut -d "=" -f 2)
 protoninstalled=$(dirname "$protonexec" | xargs basename)
 [ ! -z "$protonexec" ] && protoninstalled=$(dirname "$protonexec" | sed 's@/bin@@g' | xargs basename)
fi

# Output in zenity
function output {
  [ ! -z "$msg" ] && msg="--text=$msg" && param="$param --no-wrap"
  zenity $param "$msg"
}

# Launch game function
function launchgame {
 grep -q "/bin/wine" <<<"$protonexec" && mode="wine" || mode="proton"
 action="launch"
 gameslist
 gamepath=$(dirname "$selectedgamepath")
 [ ! -d "$gamepath" ] && param="--error" && msg="Not found game path: ${gamepath}. \nVerify the path is correct and the disk mounted." && output && desktopmenu || cd "$gamepath"
 commandsbefore=( $(grep "^commandsbefore" "$config" | cut -d "=" -f 2 | sed -e "s/ /+/g" -e "s/,/\n/g") )
 commandsafter=( $(grep "^commandsafter" "$config" | cut -d "=" -f 2 | sed -e "s/ /+/g" -e "s/,/\n/g") )
 [ ! -z "$commandsbefore" ] && for i in "${commandsbefore[@]}"; do cmd=$(sed "s/+/ /g" <<<"${i}"); $cmd & done
 if [ "$mode" = "proton" ]; then
  if [ ! -z "$gamemode" ]; then
   gamemoderun STEAM_COMPAT_CLIENT_INSTALL_PATH="$steaminstallpath" STEAM_COMPAT_DATA_PATH="$protonbottle" "$protonexec" run "$selectedgamepath" $gameparams &
  else
   STEAM_COMPAT_CLIENT_INSTALL_PATH="$steaminstallpath" STEAM_COMPAT_DATA_PATH="$protonbottle" "$protonexec" run "$selectedgamepath" $gameparams &
  fi
 else
  [ -d "${protonbottle}/pfx" ] && protonbottle="${protonbottle}/pfx"
  if [ ! -z "$gamemode" ]; then
   gamemoderun WINEPREFIX="$protonbottle" "$protonexec" "$selectedgamepath" $gameparams &
  else
   WINEPREFIX="$protonbottle" "$protonexec" "$selectedgamepath" $gameparams &
  fi
 fi
 # Checking if game has started
 #sleep 5 && pgrep $(basename "$selectedgamepath") >/dev/null && \
  echo "Launching ${selectedgame}..." ; echo "$(basename $0) exits and Proton takes over. Watch the terminal for any errors."
  #zenity --progress --pulsate --auto-close --auto-kill --text="Launching ${selectedgame}..."
# TEMPORARILY REMOVED PROCESS VERIFICATION
 #[ "$?" != 0 ] && param="--error" && \
  #msg="Game execution failed." && output && exit 1
 # $(basename "$selectedgamepath")
 [ ! -z "$commandsafter" ] && sleep 20 && while [ ! -z $(pgrep wineserver) ]; do sleep 5; done && \
  for i in "${commandsafter[@]}"; do cmd=$(sed "s/+/ /g" <<<"${i}"); $cmd & done
}

# Add game function
function addgame {
 gamename=$(zenity --entry --text="Enter new game name:" --width=300)
 [ "$?" -ne 0 ] && param="--error" && msg="Cancelled." && output && desktopmenu
 [ -z "$gamename" ] && param="--error" && msg="Input cannot be empty." && output && desktopmenu
 [ -f "$gamelist" ] && checkgamename=$(grep -Pw "$gamename" "$gamelist" | cut -d '=' -f 1) && \
  [ ! -z "$checkgamename" ] && \
  msg="Found $gamename already in game list. \nGame names must be unique." && output && addgame
 gamepath=$(zenity --file-selection --title="Select a game executable" --filename "${HOME}/" --file-filter="*.exe *.msi")
 [ "$?" -ne 0 ] && param="--error" && msg="Cancelled." && output && desktopmenu
 gameparams=$(zenity --entry --text="Enter launch parameters if you want or else just press OK:" --width=300)
 [ ! -z "$gameparams" ] && echo "${gamename}=${gamepath}=${gameparams}" >> "$gamelist" || echo "${gamename}=${gamepath}" >> "$gamelist"
 param="--info" && msg="Success. $gamename added to ${gamelist}." && output
 sort "$gamelist" > "${gamelist}.tmp" && mv "${gamelist}.tmp" "$gamelist"
 desktopmenu
}

# Games list function
function gameslist {
 [ ! -f "$gamelist" ] && param="--error" && msg="Game list not found. Add games first and retry." && output && desktopmenu
 gamenames=()
 while IFS= read -r i; do
  gamenames+=( "$(echo $i | cut -d '=' -f 1)" )
 done < "$gamelist"
  selectedgame=$(zenity --list --title="Games" --text="Select a game to $action:" --column="Game" "${gamenames[@]}" --height=330 --width=500)
  [[ "$?" -ne 0 || -z "$selectedgame" ]] && desktopmenu
  selectedgamepath=$(grep -Pw "$selectedgame" "$gamelist" | cut -d '=' -f 2)
  gameparams=$(grep -Pw "$selectedgame" "$gamelist" | cut -d '=' -f 3)
}

# Remove game function
function removegame {
 action="remove"
 gameslist
 param="--question" && msg="Are you sure you want to remove ${selectedgame} from the game list?" && output
 [ "$?" -ne 0 ] && param="--info" && msg="Game removal cancelled." && output && desktopmenu
 sed -i "/\<${selectedgame}\>/d" "$gamelist" && param="--info" && msg="Removed: $selectedgame" && output && desktopmenu
}

# Winetricks function
function runwinetricks {
 [ -z $(whereis winetricks | awk '{print $2}') ] && param="--error" && msg="winetricks not found installed. Install winetricks and retry." && output && desktopmenu
 [ -z $(whereis wine | awk '{print $2}') ] && param="--error" && msg="wine not found installed. Install wine and retry." && output && desktopmenu
 WINEPREFIX="${protonbottle}/pfx" winetricks
 desktopmenu
}

# Start CoreCtrl
function startcorectrl {
 [ -z $(whereis corectrl | awk '{print $2}') ] && param="--error" && msg="corectrl not found installed. Install CoreCtrl and retry.\nhttps://gitlab.com/corectrl/corectrl" && output && desktopmenu
 (
  $(which corectrl)
  [ "$?" -ne 0 ] && param="--error" && msg="Something went wrong and CoreCtrl returned an unknown error.\nMake sure to have installed a polkit because CoreCtrl requires password.\nhttps://gitlab.com/corectrl/corectrl/-/wikis/Setup" && output
 )&
 desktopmenu
}

# Enable or disable gamemode
function enablegamemode {
 [ -z $(whereis gamemoderun | awk '{print $2}') ] && param="--error" && msg="gamemoderun not found installed. Install GameMode and retry." && output && desktopmenu
 [ -z "$gamemode" ] && gamemode=1 || gamemode=
 [ -z "$gamemode" ] && gamemodestate="disabled" || gamemodestate="enabled"
 param="--info" && msg="GameMode optimisations are now $gamemodestate.\nAttention: Sometimes GameMode decreases performance. Test with and without it depending the game." && output && desktopmenu
}

# Enable or disable OSD function
function osd {
 selectedosditem=$(zenity --list --radiolist --text="Linux Game Launcher v${version} - OSD menu" \
 --column="Select" --column="Operation" FALSE "Basic info (Just FPS and GPU usage info)" \
 TRUE "Normal info (More detailed info of GPU, Drivers etc)" FALSE "Full info (All available items displayed)" \
 FALSE "Disable DXVK OSD HUD" --height=330 --width=500)
 [ "$?" -ne 0 ] && desktopmenu

grep -q ^Basic <<<"$selectedosditem" && export DXVK_HUD=fps,gpuload && desktopmenu
grep -q ^Normal <<<"$selectedosditem" && export DXVK_HUD=fps,devinfo,gpuload,memory,version,api && desktopmenu
grep -q ^Full <<<"$selectedosditem" && export DXVK_HUD=full && desktopmenu
grep -q ^Disable <<<"$selectedosditem" && export DXVK_HUD= && desktopmenu
}

# Reset to default function
function reset {
 param="--question" && msg="This option will reset $(basename $0) to default.\nIt will remove your Proton bottle: $protonbottle.\nand your config file: ${config}.\nYour game list will remain in tact.\nDo you want to proceed?" && output
 [ "$?" -ne 0 ] && param="--info" && msg="Reset cancelled." && output && desktopmenu
 [ -d "$protonbottle" ] && rm -rf "$protonbottle" && rm "$config" && param="--info" && msg="Proton bottle removed: ${protonbottle}.\nConfig removed: ${config}\nRestart the script to initialize new ones. Exiting." && output
 exit 0
}

# Set commands to run before and after game launch function
function run_commands {
 commandsbefore=$(zenity --entry --text="Enter commands to run before game execution (separated by commas):" --width=300)
 if [ ! -z "$commandsbefore" ]; then
  grep -q "^commandsbefore=" "$config" && param="--info" && msg="Command(s) already found in config. Replacing..." && output && \
   grep -v "^commandsbefore=" "$config" > "${scriptpath}/configtmp" && mv "${scriptpath}/configtmp" "$config"
  echo "commandsbefore=${commandsbefore}" >> "$config" && \
  param="--info" && msg="Added command(s): $commandsbefore to ${config}." && output
 fi
 commandsafter=$(zenity --entry --text="Enter commands to run after game execution is finished (separated bycommas):" --width=300)
 if [ ! -z "$commandsafter" ]; then
  grep -q "^commandsafter=" "$config" && param="--info" && msg="Command(s) already found in config. Replacing..." && output && \
   grep -v "^commandsafter=" "$config" > "${scriptpath}/configtmp" && mv "${scriptpath}/configtmp" "$config"
  echo "commandsafter=${commandsafter}" >> "$config" && \
  param="--info" && msg="Added command(s): $commandsafter to ${config}." && output
 fi
 [ -z "$commandsbefore" ] && [ -z "$commandsafter" ] && param="--info" && msg="No command(s) added." && output
 desktopmenu
}

# Set Proton or other runner function
function set_proton_version {
 ls -d ${compatpath}/* > /tmp/protonversionsinstalled.txt
 protonversions=()
 while IFS= read -r i; do
  protonversions+=( "$(basename $i)" )
 done </tmp/protonversionsinstalled.txt
 selectedprotonversion=$(zenity --list --title="Installed Proton GE Custom versions" --text="Select a version:" --column="Proton GE Custom version" "${protonversions[@]}" --height=330 --width=500)
 if [ "$?" -eq 0 ]; then
  [ ! -f "${compatpath}/${selectedprotonversion}/proton" ] && selectedprotonversionset="${selectedprotonversion}/bin/wine" || selectedprotonversionset="${selectedprotonversion}/proton"
  [ ! -f "${compatpath}/${protoninstalled}/proton" ] && protoninstalledset="${protoninstalled}/bin/wine" || protoninstalledset="${protoninstalled}/proton"
  sed -i "s@${protoninstalledset}@${selectedprotonversionset}@" "$config"
  protonexec="${compatpath}/${selectedprotonversionset}"
  protoninstalled="$selectedprotonversion"
  param="--info" && msg="$selectedprotonversion is set."
  output
 fi
 desktopmenu
}

# Update script function
function update {
 url="https://raw.githubusercontent.com/PerseusArkouda/GameExec/master/GameExec"
 newscript="${script}.new"
 printf "$(echo $'\n\r')$(basename $0) is updating..." && \
 curl -L "$url" -o "$newscript" &>/dev/null
 [ "$?" -eq 0 ] && cp "$newscript" "$script" && rm -f "$newscript" && \
 echo "Done!" && echo "$(echo $'\n\r')Restarting $(basename $0)..." && \
  $script "success" && exit 0 || \
  param="--error" && msg="$(basename $0) update failed!" && output && desktopmenu
}

# Drop error if zenity is not installed function
function chk_zenity {
 [ -z "$(whereis zenity | awk '{print $2}')" ] && \
  echo "zenity was not found installed. Install zenity and try again. Exiting." && exit 1
}

# Drop warning if steam is not installed function and not running
function chk_steam {
 [ -z "$(whereis steam | awk '{print $2}')" ] && \
  param="--error" && msg="Steam cannot be found installed. Install Steam and try again. Exiting." && output && exit 1

 # Check if Steam is running
 function chk {
  pgrep -x steam >/dev/null
 }

 chk || (param="--question" && msg="Steam is not running. Run now?" && output)
 if [ "$?" -ne 0 ]; then
  param="--error" && msg="WARNING: You can only run games which don't require Steam to run." && output
 else
  chk || steam &
  chk || (param="--info" && msg="Starting Steam...\n(Press OK only after you have logged in on Steam)" && output)
 fi
}

# Check if proton update is available and offer to install
function chk_proton_update {
 protonurl="https://github.com$(curl -s -L https://github.com/GloriousEggroll/proton-ge-custom/releases/latest | grep 'tar.gz' | head -1 | cut -d '"' -f 2)"
 protonfile=$(basename "$protonurl")
 protondir="${protonfile/.tar.gz/}"
 protononline="$protondir"
 protonfullpath="${compatpath}/${protondir}"
 if [ -f "$protonexec" ] && [ ! -z "$protononline" ]; then
  checkprotononline=$(awk -F- '{gsub(/\./,"");print $2$4}' <<<"$protononline")
  checkprotoninstalled=$(ls -v1 "$compatpath" | awk -F- '/Proton-/ {gsub(/\./,"");print $2$4}' | tail -1)
  while [ ${#checkprotoninstalled} -ne 3 ]; do checkprotoninstalled=${checkprotoninstalled::-1}; done
  while [ ${#checkprotononline} -ne 3 ]; do checkprotononline=${checkprotononline::-1}; done
  if [ "$checkprotoninstalled" -lt "$checkprotononline" ]; then
   param="--question" && msg="An updated version of Proton GE Custom is available online: ${protononline}. \nWould you like to update now?" && output
   if [ "$?" -eq 0 ]; then
    updateproton=1
   else
    param="--info" && msg="Proton GE Custom update cancelled." && output && desktopmenu
   fi
  fi
 fi

 if [ ! -z "$updateproton" ]; then
  (
    echo "1" ; sleep 1
    echo "# Installing $protononline..." ; sleep 1
    echo "5" ; sleep 1
    echo "# Creating $compatpath if not exist..." ; sleep 1
    mkdir -p "$compatpath" ; sleep 1
    echo "10" ; sleep 1
    echo "# Downloading ${protononline}..." ; sleep 1
     curl -L "${protonurl}" -o "${compatpath}/Proton.tar.gz" ; sleep 1
    echo "60" ; sleep 1
    echo "# Uncompressing ${protononline}..." ; sleep 1
    rm -rf "$protonfullpath" 2>/dev/null ; sleep 1
    tar xfz "${compatpath}/Proton.tar.gz" --directory "${compatpath}/" ; sleep 1
    echo "90" ; sleep 1
    echo "# Cleaning up..." ; sleep 1
    rm "${compatpath}/Proton.tar.gz" ; sleep 1
    protonexec="${protonfullpath}/proton" ; sleep 1
    echo "99" ; sleep 1
    echo "# Done." ; sleep 1
    echo "100" ; sleep 1
  ) |
   zenity --progress --text "Downloading ${protononline}..." --pulsate --no-cancel --auto-close
  [ "$?" -ne 0 ] && param="--error" && msg="Update Proton GE Custom cancelled." && output || \
   param="--info" && msg="$protondir is now installed." && output
  [ -f "$config" ] && sed -i "s/${protoninstalled}/${protononline}/" "$config"
 else
  param="--info" && msg="Proton GE Custom is up to date." && output
 fi
 [ "$1" != "startup" ] && desktopmenu
}

# Check if Proton is installed and offer auto install if not function
function chk_proton {
 if [ ! -f "$protonexec" ]; then
  param="--question" && msg="Proton GE Custom not found installed or not configured. \nWould you like to verify or install it now?" && output
   [ "$?" -ne 0 ] && param="--error" && msg="Cannot start without Proton GE Custom installed. Exiting." && output && exit 1
  updateproton=1 && chk_proton_update $1
 elif [ ! -f "$config" ]; then
  param="--info" && msg="$protondir found installed and will be added to the config." && output
 fi
}

# Creating config file if not found or if missing proton bottle directory function
function chk_config {
 if [ ! -f "$config" ] || [ ! -d "$protonbottle" ]; then
  [ -f "$config" ] && [ ! -d "$protonbottle" ] && msg="Proton bottle not found. Press OK to select one or create another." && output
  [ ! -f "$config" ] && param="--info" && msg="Config not found. Press OK to create a new config." && output
  echo "ProtonExec=${protonexec}" > "$config"
  while true; do
   msg="Select an existing bottle or create an empty directory to make a new Proton bottle."
   protonbottle=$(zenity --file-selection --title="$msg" --directory --filename "${HOME}/")
   echo "Directory selected: $protonbottle"
   [ -d "$protonbottle" ] && echo "ProtonBottle=${protonbottle}" >> "$config" && \
    param="--info" && msg="$config config is successfully created or updated." && output && break
   param="--error" && msg="This is not a correct directory for Proton Bottle. \nTry again." && output && chk_config
  done
 fi
}

# Main menu function
function desktopmenu {
selectedmenuitem=$(zenity --list --radiolist --text="Linux Game Launcher v${version} - Main menu" \
 --column="Select" --column="Operation" TRUE "Launch a game" FALSE "Add a new game" \
 FALSE "Remove a game from the game list" FALSE "CoreCtrl (requires corectrl)" FALSE "GameMode optimisations (requires gamemode)" FALSE "DXVK OSD HUD (On Screen Display)" FALSE "Winetricks (requires wine and winetricks)" \
 FALSE "Run command(s) before and after game launch" FALSE "Set Proton version or other runner" FALSE "Check for Proton GE Custom updates" FALSE "Update $(basename $0)" FALSE "Reset $(basename $0)" --height=390 --width=500)

grep -q ^Launch <<<"$selectedmenuitem" && launchgame
grep -q ^Add <<<"$selectedmenuitem" && addgame
grep -q ^Remove <<<"$selectedmenuitem" && removegame
grep -q ^CoreCtrl <<<"$selectedmenuitem" && startcorectrl
grep -q ^GameMode <<<"$selectedmenuitem" && enablegamemode
grep -q ^DXVK <<<"$selectedmenuitem" && osd
grep -q ^Winetricks <<<"$selectedmenuitem" && runwinetricks
grep -q ^Reset <<<"$selectedmenuitem" && reset
grep -q ^Update <<<"$selectedmenuitem" && update
grep -q ^Set <<<"$selectedmenuitem" && set_proton_version
grep -q ^Check <<<"$selectedmenuitem" && chk_proton_update
grep -q ^Run <<<"$selectedmenuitem" && run_commands

grep -q desktop <<<"$*" && echo "$(basename $0) is running through the desktop shortcut. If you have issues run it from a terminal to be able to watch Proton's output." && sleep 15

echo "$(echo $'\n\r')#### Linux Game Launcher Finished. ####"
exit 0
}

chk_zenity

chk_steam

chk_proton startup

chk_config

# Checking if update was successful
grep -q success <<<"$*" && param="--info" && msg="$(basename $0) Updated Successfully. \n${changes}" && output

# Main program execution
echo
desktopmenu
