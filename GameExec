#!/bin/bash
# With this script you can manage and run Windows games via Proton.
# Can be executed either by running ./GameExec directly from the terminal or by running GameExec.desktop from a file manager.
#  Remember to edit the script's path in GameExec.desktop if you plan to move it to a different directory from GameExec.
# Known issues: Sometimes script crashes while trying to launch the game through GameExec.desktop. Prefer running directly from GameExec.

echo "$(echo $'\n\r')#### Linux Game Launcher ####"
echo "by Perseus"

script=$(realpath "$0")
scriptpath=$(dirname "$script")
config="$scriptpath/$(basename $0).conf"
gamelist="$scriptpath/GameList.txt"
compatpath="${HOME}/.steam/root/compatibilitytools.d"
[ ! -d "$compatpath" ] && mkdir -p "$compatpath"
protonexist=$(ls "$compatpath" | grep "Proton")

if [ -f "$config" ]; then
 # Reading values from conf if exist
 protonbottle=$(grep "ProtonBottle" "$config" | cut -d "=" -f 2)
 protonexec=$(grep "ProtonExec" "$config" | cut -d "=" -f 2)
 [ ! -z "$protonexec" ] && protoninstalled=$(dirname "$protonexec" | xargs basename)
 # Fixing ProtonExec path in conf if different from existing path
 [ ! -z "$protonexist" ] && [ "$protonexist" != "$protoninstalled" ] && \
  sed -i "s/${protoninstalled}/${protonexist}/" "$config" && \
  protoninstalled="$protonexist" && protonexec="${compatpath}/${protoninstalled}/proton"
else
 # Setting proton executable path if exist even without a conf
 [ ! -z "$protonexist" ] && protonexec="${compatpath}/${protonexist}/proton" || protonexec=""
 [ ! -z "$protonexec" ] && protoninstalled=$(dirname "$protonexec" | xargs basename)
fi

# Output in zenity
function output {
  # --timeout 30 kills both steam and game and --progress stays alive until cancel is pressed without it
  [ ! -z "$msg" ] && msg="--text=$msg" && param="$param --no-wrap"
  zenity $param "$msg"
}

# Launch game function
function launchgame {
 action="launch"
 gameslist
 # Experimental vulkan renderer.
 #export RADV_PERFTEST=aco
 gamepath=$(dirname "$selectedgamepath")
 cd "$gamepath"
 STEAM_COMPAT_DATA_PATH="$protonbottle" "$protonexec" run "$selectedgamepath" &
 #sleep 5 && pgrep $(basename "$selectedgamepath") >/dev/null && \
  echo "Launching ${selectedgame}..." ; echo "$(basename $0) exits and Proton takes over. Watch the terminal for any errors."
  #zenity --progress --pulsate --auto-close --auto-kill --text="Launching ${selectedgame}..."
# TEMPORARILY REMOVED PROCESS VERIFICATION
 #[ "$?" != 0 ] && param="--error" && \
  #msg="Game execution failed." && output && exit 1
}

# Add game function
function addgame {
 gamename=$(zenity --entry --text="Enter new game name:" --width=300)
 [ "$?" -ne 0 ] && param="--error" && msg="Cancelled." && output && desktopmenu
 [ -z "$gamename" ] && param="--error" && msg="Input cannot be empty." && output && desktopmenu
 [ -f "$gamelist" ] && checkgamename=$(grep -Pw "$gamename" "$gamelist" | cut -d '=' -f 1) && \
  [ ! -z "$checkgamename" ] && \
  msg="Found $gamename already in game list. \nGame names must be unique." && output && addgame
 gamepath=$(zenity --file-selection --title="Select a game executable" --filename "${HOME}/" --file-filter="*.exe")
 [ "$?" -ne 0 ] && param="--error" && msg="Cancelled." && output && desktopmenu
 echo "${gamename}=${gamepath}" >> "$gamelist"
 param="--info" && msg="Success. $gamename added to ${gamelist}." && output
 sort "$gamelist" > "${gamelist}.tmp" && mv "${gamelist}.tmp" "$gamelist"
 desktopmenu
}

# Games list function
function gameslist {
 [ ! -f "$gamelist" ] && param="--error" && msg="Game list not found. Add games first and retry." && output && desktopmenu
gamenames=()
while IFS= read -r i; do
 gamenames+=( "$(echo $i | cut -d '=' -f 1)" )
done < "$gamelist"
 selectedgame=$(zenity --list --title="Games" --text="Select a game to $action:" --column="Game" "${gamenames[@]}" --height=300 --width=500)
 [[ "$?" -ne 0 || -z "$selectedgame" ]] && desktopmenu
 selectedgamepath=$(grep -Pw "$selectedgame" "$gamelist" | cut -d '=' -f 2)
}

# Remove game function
function removegame {
 action="remove"
 gameslist
 param="--question" && msg="Are you sure you want to remove ${selectedgame} from the game list?" && output
 [ "$?" -ne 0 ] && param="--info" && msg="Game removal cancelled." && output && desktopmenu
 sed -i "/\<${selectedgame}\>/d" "$gamelist" && param="--info" && msg="Removed: $selectedgame" && output && desktopmenu
}

# Winetricks function
function runwinetricks {
  [ -z $(whereis winetricks | awk '{print $2}') ] && param="--error" && msg="winetricks not found installed. Install winetricks and retry." && output && desktopmenu
  [ -z $(whereis wine | awk '{print $2}') ] && param="--error" && msg="wine not found installed. Install wine and retry." && output && desktopmenu
 WINEPREFIX="${protonbottle}/pfx" winetricks
 desktopmenu
}

function osd {
 selectedosditem=$(zenity --list --radiolist --text="Linux Game Launcher - OSD menu" \
 --column="Select" --column="Operation" FALSE "Basic info (Just FPS and GPU usage info)" \
 TRUE "Normal info (More detailed info of GPU, Drivers etc)" FALSE "Full info (All available items displayed)" \
 FALSE "Disable DXVK OSD HUD" --height=300 --width=500)
 [ "$?" -ne 0 ] && desktopmenu

grep -q ^Basic <<<"$selectedosditem" && export DXVK_HUD=fps,gpuload && desktopmenu
grep -q ^Normal <<<"$selectedosditem" && export DXVK_HUD=fps,devinfo,gpuload,memory,version,api && desktopmenu
grep -q ^Full <<<"$selectedosditem" && export DXVK_HUD=full && desktopmenu
grep -q ^Disable <<<"$selectedosditem" && export DXVK_HUD= && desktopmenu
}

# Reset to default function
function reset {
 param="--question" && msg="This option will reset $(basename $0) to default.\nIt will remove your Proton bottle: $protonbottle.\nand your config file: ${config}.\nYour game list will remain in tact.\nDo you want to proceed?" && output
 [ "$?" -ne 0 ] && param="--info" && msg="Reset cancelled." && output && desktopmenu
 [ -d "$protonbottle" ] && rm -rf "$protonbottle" && rm "$config" && param="--info" && msg="Proton bottle removed: ${protonbottle}.\nConfig removed: ${config}\nRestart the script to initialize new ones. Exiting." && output
 exit 0
}

# Update script function
function update {
 url="https://raw.githubusercontent.com/PerseusArkouda/GameExec/master/GameExec"
 newscript="${script}.new"
 printf "$(echo $'\n\r')$(basename $0) is updating..." && \
 curl -L "$url" -o "$newscript" &>/dev/null
 [ "$?" -eq 0 ] && cp "$newscript" "$script" && rm -f "$newscript" && \
 echo "Done!" && echo "$(echo $'\n\r')Restarting $(basename $0)..." && \
  $script "success" && exit 0 || \
  param="--error" && msg="$(basename $0) update failed!" && output
}

# Main menu function
function desktopmenu {
selectedmenuitem=$(zenity --list --radiolist --text="Linux Game Launcher - Main menu" \
 --column="Select" --column="Operation" TRUE "Launch a game" FALSE "Add a new game" \
 FALSE "Remove a game from the game list" FALSE "DXVK OSD HUD (On Screen Display)" FALSE "Winetricks (Requires wine and winetricks)" \
 FALSE "Reset $(basename $0)" FALSE "Update $(basename $0)" --height=300 --width=500)

grep -q ^Launch <<<"$selectedmenuitem" && launchgame
grep -q ^Add <<<"$selectedmenuitem" && addgame
grep -q ^Remove <<<"$selectedmenuitem" && removegame
grep -q ^DXVK <<<"$selectedmenuitem" && osd
grep -q ^Winetricks <<<"$selectedmenuitem" && runwinetricks
grep -q ^Reset <<<"$selectedmenuitem" && reset
grep -q ^Update <<<"$selectedmenuitem" && update

echo "$(echo $'\n\r')#### Linux Game Launcher Finished. ####"
exit 0
}

# Drop error if zenity is not installed
[ -z "$(whereis zenity | awk '{print $2}')" ] && \
 echo "zenity was not found installed. Install zenity and try again. Exiting." && exit 1

# Drop error if steam is not installed
[ -z "$(whereis steam | awk '{print $2}')" ] && \
 param="--error" && msg="Steam cannot be found installed. Install Steam and try again. Exiting." && output && exit 1

# Check if Steam is running
function chk {
 pgrep steam >/dev/null
}

chk || (param="--question" && msg="Steam is not running. Run now?" && output)
if [ "$?" -ne 0 ]; then
 param="--error" && msg="WARNING: You can only run games which don't require Steam to run." && output
else
 chk || steam &
 chk || (param="--info" && msg="Starting Steam...\n(Press OK only after you have logged in on Steam)" && output)
fi

# Check if Proton is installed and also check for update
protonurl="https://github.com$(curl -s -L https://github.com/GloriousEggroll/proton-ge-custom/releases/latest | grep 'tar.gz' | head -1 | cut -d '"' -f 2)"
protonfile=$(basename "$protonurl")
protondir="${protonfile/.tar.gz/}"
protonfullpath="${compatpath}/${protondir}"
protononline="$protondir"
[ ! -z "$protoninstalled" ] && [ ! -z "$protononline" ] && [ "$protoninstalled" != "$protononline" ] && \
 param="--question" && msg="An updated version of Proton GE Custom is available online: ${protononline}. \nWould you like to update it now?" && output && \
  [ "$?" -eq 0 ] && updateproton=1

# Drop error if Proton not installed and offer auto install or update
if [ ! -f "$protonexec" ] || [ ! -z "$updateproton" ]; then
 [ ! -f "$protonexec" ] && param="--question" && msg="Proton GE Custom not found installed or not configured. \nWould you like to verify or install it now?" && output
  [ "$?" -ne 0 ] && param="--error" && msg="Cannot start without Proton GE Custom installed. Exiting." && output && exit 1
# ADD ZENITY PROGRESS HERE
 echo "Installing $protononline..."
 [ ! -z "$updateproton" ] && printf "Cleaning previously installed Proton GE Custom..." && rm -rf "${compatpath}/${protoninstalled}" && echo "Done."
 mkdir -p "$compatpath" && \
  curl -L "${protonurl}" -o "${compatpath}/Proton.tar.gz" && \
  printf "Uncompressing..." && \
  rm -rf "$protonfullpath" 2>/dev/null && \
  tar xfz "${compatpath}/Proton.tar.gz" --directory "${compatpath}/" && \
  rm "${compatpath}/Proton.tar.gz" && \
  echo "Done." && \
  protonexec="${protonfullpath}/proton" && \
  param="--info" && msg="$protondir is now installed." && output
  [ -f "$config" ] && sed -i "s/${protoninstalled}/${protononline}/" "$config"
else
 [ ! -f "$config" ] && param="--info" && msg="$protondir found installed and will be added to the config." && output || echo
fi

# Creating config file if not found
if [ ! -f "$config" ]; then
 msg="Select an existing bottle or create an empty directory to make a new Proton bottle."
 param="--info" && msg="Config not found. Creating new config... \n${msg} " && output
 echo "ProtonExec=${protonexec}" > "$config"
 while true; do
  protonbottle=$(zenity --file-selection --title="$msg" --directory --filename "${HOME}/")
  echo "Directory selected: $protonbottle"
  [ -d "$protonbottle" ] && echo "ProtonBottle=${protonbottle}" >> "$config" && \
   param="--info" && msg="$config config is successfully created." && output && break
  param="--error" && msg="This is not a correct directory for Proton Bottle. \nTry again." && output
 done
fi

# Checking if update was successful
grep -q success <<<"$*" && param="--info" && msg="$(basename $0) Updated Successfully." && output

# Main program execution
echo
desktopmenu
